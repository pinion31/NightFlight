{"version":3,"sources":["../server/server.js"],"names":["passport","require","TwitterStrategy","Strategy","session","mongoose","yelp","connect","Promise","global","clientId","process","env","CLIENT_ID_YELP","clientSecret","CLIENT_KEY_YELP","clubSchema","Schema","id","String","name","attendees","Array","userSchema","clubs","Clubber","model","Club","serverClubList","app","use","static","json","req","res","next","header","secret","cookie","maxAge","consumerKey","consumerSecret","callbackURL","token","tokenSecret","profile","done","console","dir","get","log","authenticate","successRedirect","failureRedirect","post","accessToken","then","response","client","jsonBody","access_token","searchRequest","term","location","body","query","search","results","businesses","forEach","club","findOne","err","result","clubResult","image_url","goingMessage","RSVPmessage","address","address1","city","state","zipcode","zip_code","stars","rating","price","length","occ","newClub","save","push","JSON","stringify","catch","e","userAlreadyRSVPd","filter","user","username","findOneAndUpdate","list","send","listen"],"mappings":"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","file":"server.js","sourcesContent":["\r\nimport 'babel-polyfill';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\n//require('es6-promise').polyfill();\r\n//require('isomorphic-fetch');\r\n//var cors = require('cors');\r\nvar passport = require('passport');\r\nvar TwitterStrategy = require('passport-twitter').Strategy;\r\nvar session = require('express-session');\r\n\r\nconst mongoose = require('mongoose');\r\nconst yelp = require('yelp-fusion');\r\n\r\nmongoose.connect('mongodb://localhost/nightflight');\r\nmongoose.Promise = global.Promise;\r\n\r\nconst clientId = process.env.CLIENT_ID_YELP;\r\nconst clientSecret = process.env.CLIENT_KEY_YELP;\r\n\r\nconst clubSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  attendees: Array,\r\n});\r\n\r\nconst userSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  clubs: Array,\r\n});\r\n\r\nconst Clubber = mongoose.model('user', userSchema);\r\nconst Club = mongoose.model('club', clubSchema);\r\n\r\nlet serverClubList = [];\r\n\r\nconst app = express();\r\n\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\napp.use(function(req, res, next){\r\n     res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n     res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n     res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n     res.header('Access-Control-Allow-Credentials', \"true\");\r\n     next();\r\n });\r\n\r\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}));\r\n\r\npassport.use(new TwitterStrategy({\r\n    consumerKey: 'x2rfeTTyNcv8gswFNjfXdiGoH',\r\n    consumerSecret: 'erZgMcrVqE6AfRvUiUPWeTxi8XwPB4ONmZcBl8zKqol1lQ0P4s',\r\n    callbackURL: \"http://localhost:8080/auth/twitter/callback\"\r\n  },\r\n  function(token, tokenSecret, profile, done) {\r\n   console.dir(profile);\r\n  }\r\n  ));\r\n\r\napp.get('/login', (req,res) => {\r\n  console.log('passport failure');\r\n\r\n});\r\napp.get('/callback', (req,res) => {\r\n    console.log('successful callback');\r\n});\r\n\r\n// Redirect the user to Twitter for authentication.  When complete, Twitter\r\n// will redirect the user back to the application at\r\n//   /auth/twitter/callback\r\napp.get('/auth/twitter', passport.authenticate('twitter'));\r\n\r\n// Twitter will redirect the user to this URL after approval.  Finish the\r\n// authentication process by attempting to obtain an access token.  If\r\n// access was granted, the user will be logged in.  Otherwise,\r\n// authentication has failed.\r\napp.get('/auth/twitter/callback',\r\n  passport.authenticate('twitter', { successRedirect: '/callback',\r\n                                     failureRedirect: '/login' })\r\n);\r\n\r\napp.post('/list', (req, res) => {\r\n  yelp.accessToken(clientId, clientSecret).then((response) => {\r\n    const client = yelp.client(response.jsonBody.access_token);\r\n\r\n    const searchRequest = {\r\n      term: 'nightlife',\r\n      location: req.body.query,\r\n    };\r\n\r\n    client.search(searchRequest).then((response) => {\r\n      const results = response.jsonBody.businesses;\r\n      serverClubList = [];\r\n\r\n      results.forEach((club) => {\r\n        Club.findOne({id: club.id}, (err, result) => {\r\n          if (err) { console.log(`error ${err}`); }\r\n          console.dir(club);\r\n\r\n          const clubResult = {\r\n            id: club.id,\r\n            name: club.name,\r\n            attendees: [],\r\n            image_url: club.image_url,\r\n            goingMessage: '0 GOING',\r\n            RSVPmessage: 'RSVP',\r\n            address: club.location.address1,\r\n            city: club.location.city,\r\n            state: club.location.state,\r\n            zipcode: club.location.zip_code,\r\n            stars: club.rating,\r\n            price: club.price,\r\n          };\r\n\r\n          if (result) { // if club already exists in db\r\n            clubResult.attendees = result.attendees;\r\n            clubResult.goingMessage = `${result.attendees.length} GOING`;\r\n            // checks and  indicates if user is already going to this club\r\n            result.attendees.forEach((occ) => {\r\n              if (occ === req.body.name) {\r\n                clubResult.goingMessage = `${result.attendees.length} GOING - YOU'RE GOING!`;\r\n                clubResult.RSVPmessage = 'unRSVP';\r\n              }\r\n            });\r\n          } else { // create new Club entry if does not exist in db\r\n            const newClub = new Club({\r\n              id: club.id,\r\n              name: club.name,\r\n              attendees: [],\r\n              goingMessage: '0 GOING',\r\n              RSVPmessage: 'RSVP',\r\n              address: club.location.address1,\r\n              city: club.location.city,\r\n              state: club.location.state,\r\n              zipcode: club.location.zip_code,\r\n              stars: club.rating,\r\n              price: club.price,\r\n            });\r\n\r\n            // save new Club entry\r\n            newClub.save((err) => {\r\n              if (err) return err;\r\n            });\r\n          }\r\n\r\n          serverClubList.push(clubResult);\r\n\r\n          if (serverClubList.length === results.length) {\r\n            res.json(JSON.stringify(serverClubList));\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }).catch((e) => {\r\n    console.log(e);\r\n  });\r\n});\r\n\r\n// this url doubles as removeSelf too - user can toggle adding self and removing self\r\napp.post('/addSelf', (req, res) => {\r\n  serverClubList.forEach((club) => {\r\n    if (club.id === req.body.id) { // finds corresponding club to add or remove user from\r\n      let userAlreadyRSVPd = false;\r\n\r\n      club.attendees = club.attendees.filter((user) => {\r\n        // checks if user has already RSVP'ed--if so, removes user from occupant list\r\n        if (user === req.body.username) {\r\n          userAlreadyRSVPd = true;\r\n          // resets goingMessage to one less occupant after user removal\r\n          club.goingMessage = `${club.attendees.length - 1} GOING`;\r\n          club.RSVPmessage = 'RSVP'; // resets RSVP button from unRSVP to RSVP\r\n        } else {\r\n          return user;\r\n        }\r\n      });\r\n\r\n      if (!userAlreadyRSVPd) { // if user has not already RSVP'd, add user as going\r\n        club.attendees.push(req.body.username);\r\n        club.goingMessage = `${club.attendees.length} GOING - YOU'RE GOING!`;\r\n        club.RSVPmessage = 'unRSVP';\r\n      }\r\n\r\n      // updates occupant list in DB\r\n      Club.findOneAndUpdate({id: club.id}, {\r\n        attendees: club.attendees,\r\n        goingMessage: club.goingMessage,\r\n        RSVPmessage: club.RSVPmessage},\r\n      (err) => {\r\n        if (err) return err;\r\n      });\r\n    }\r\n  });\r\n\r\n  res.json(JSON.stringify(serverClubList));\r\n});\r\n\r\napp.post('/getAttendees', (req, res) => {\r\n  console.log('hit');\r\n  res.json({list:['chris','nicole', 'corryn', 'krystle']});\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n  res.send('no match');\r\n});\r\n\r\napp.listen(3000, () => {\r\n  console.log('App started on port 3000');\r\n});\r\n"]}