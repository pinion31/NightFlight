{"version":3,"sources":["../server/server.js"],"names":["passport","require","TwitterStrategy","Strategy","session","cookieparser","mongoose","yelp","connect","process","env","MONGOLAB_URI","Promise","global","clientId","CLIENT_ID_YELP","clientSecret","CLIENT_KEY_YELP","clubSchema","Schema","id","String","name","attendees","Array","twitterUser","token","displayName","userName","Club","model","User","serverClubList","app","use","static","json","urlencoded","extended","req","res","next","header","secret","cookie","secure","resave","saveUninitialized","initialize","consumerKey","CLIENT_ID_TWITTER","consumerSecret","CLIENT_KEY_TWITTER","callbackURL","tokenSecret","profile","done","findOne","exec","err","user","newUser","username","save","data","serializeUser","deserializeUser","obj","get","authenticate","failureRedirect","redirect","post","accessToken","then","response","client","jsonBody","access_token","searchRequest","term","location","body","query","search","results","businesses","forEach","club","result","console","log","clubResult","image_url","goingMessage","RSVPmessage","address","address1","city","state","zipcode","zip_code","stars","rating","price","length","occ","newClub","push","JSON","stringify","catch","e","userAlreadyRSVPd","filter","findOneAndUpdate","list","send","listen","PORT"],"mappings":"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","file":"server.js","sourcesContent":["import 'babel-polyfill';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\n\r\nconst passport = require('passport');\r\nconst TwitterStrategy = require('passport-twitter').Strategy;\r\nconst session = require('express-session');\r\nconst cookieparser = require('cookie-parser');\r\nconst mongoose = require('mongoose');\r\nconst yelp = require('yelp-fusion');\r\n\r\nmongoose.connect(process.env.MONGOLAB_URI); //production db\r\nmongoose.Promise = global.Promise;\r\n\r\nconst clientId = process.env.CLIENT_ID_YELP;\r\nconst clientSecret = process.env.CLIENT_KEY_YELP;\r\n\r\nconst clubSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  attendees: Array,\r\n});\r\n\r\nconst twitterUser = mongoose.Schema({\r\n  twitterUser: {\r\n    id: String,\r\n    token: String,\r\n    displayName: String,\r\n    userName: String,\r\n  }\r\n});\r\n\r\nconst Club = mongoose.model('club', clubSchema);\r\nconst User = mongoose.model('twitterUser', twitterUser);\r\n\r\nlet serverClubList = [];\r\n\r\nconst app = express();\r\n\r\napp.use(express.static('static'));\r\napp.use(cookieparser());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({extended: true}));\r\n\r\napp.use((req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n  res.header('Access-Control-Allow-Credentials', 'true');\r\n  next();\r\n});\r\n\r\napp.use(session({secret: 'keyboard cat', cookie: {secure: false}, resave: true, saveUninitialized: true}));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\npassport.use(new TwitterStrategy({\r\n  consumerKey: process.env.CLIENT_ID_TWITTER,\r\n  consumerSecret: process.env.CLIENT_KEY_TWITTER,\r\n  callbackURL: 'https://nightflight.herokuapp.com/auth/twitter/callback'\r\n},\r\n(token, tokenSecret, profile, done) => {\r\n  User.findOne({'twitterUser.id': profile.id})\r\n    .exec((err, user) => {\r\n      if (user !== null) {\r\n        return done(null, user);\r\n      }\r\n      const newUser = new User({\r\n        twitterUser: {\r\n          id: profile.id,\r\n          token,\r\n          displayName: profile.displayName,\r\n          userName: profile.username\r\n        }\r\n      });\r\n\r\n      newUser.save((err, data) => {\r\n        if (err) {\r\n          return done(err);\r\n        }\r\n        return done(null, data);\r\n      });\r\n    });\r\n}));\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user);\r\n});\r\n\r\npassport.deserializeUser((obj, done) => {\r\n  done(null, obj);\r\n});\r\n\r\n// Redirect the user to Twitter for authentication.  When complete, Twitter\r\n// will redirect the user back to the application at\r\n//   /auth/twitter/callback\r\napp.get('/auth/twitter', passport.authenticate('twitter'));\r\n\r\n// Twitter will redirect the user to this URL after approval.  Finish the\r\n// authentication process by attempting to obtain an access token.  If\r\n// access was granted, the user will be logged in.  Otherwise,\r\n// authentication has failed.\r\n\r\napp.get('/auth/twitter/callback',\r\n  passport.authenticate('twitter', {failureRedirect: '/'}),\r\n  (req, res) => {\r\n    res.redirect(`/#/search/${req.user.twitterUser.userName}`);\r\n  }\r\n);\r\n\r\napp.post('/list', (req, res) => {\r\n  yelp.accessToken(clientId, clientSecret).then((response) => {\r\n    const client = yelp.client(response.jsonBody.access_token);\r\n\r\n    const searchRequest = {\r\n      term: 'nightlife',\r\n      location: req.body.query,\r\n    };\r\n\r\n    client.search(searchRequest).then((response) => {\r\n      const results = response.jsonBody.businesses;\r\n      serverClubList = [];\r\n\r\n      results.forEach((club) => {\r\n        Club.findOne({id: club.id}, (err, result) => {\r\n          if (err) { console.log(`error ${err}`); }\r\n          const clubResult = {\r\n            id: club.id,\r\n            name: club.name,\r\n            attendees: [],\r\n            image_url: club.image_url,\r\n            goingMessage: '0 GOING',\r\n            RSVPmessage: 'RSVP',\r\n            address: club.location.address1,\r\n            city: club.location.city,\r\n            state: club.location.state,\r\n            zipcode: club.location.zip_code,\r\n            stars: club.rating,\r\n            price: club.price,\r\n          };\r\n\r\n          if (result) { // if club already exists in db\r\n            clubResult.attendees = result.attendees;\r\n            clubResult.goingMessage = `${result.attendees.length} GOING`;\r\n            // checks and  indicates if user is already going to this club\r\n            result.attendees.forEach((occ) => {\r\n              if (occ === req.body.name) {\r\n                clubResult.goingMessage = `${result.attendees.length} GOING - YOU'RE GOING!`;\r\n                clubResult.RSVPmessage = 'unRSVP';\r\n              }\r\n            });\r\n          } else { // create new Club entry if does not exist in db\r\n            const newClub = new Club({\r\n              id: club.id,\r\n              name: club.name,\r\n              attendees: [],\r\n              goingMessage: '0 GOING',\r\n              RSVPmessage: 'RSVP',\r\n              address: club.location.address1,\r\n              city: club.location.city,\r\n              state: club.location.state,\r\n              zipcode: club.location.zip_code,\r\n              stars: club.rating,\r\n              price: club.price,\r\n            });\r\n\r\n            // save new Club entry\r\n            newClub.save((err) => {\r\n              if (err) return err;\r\n            });\r\n          }\r\n\r\n          serverClubList.push(clubResult);\r\n\r\n          if (serverClubList.length === results.length) {\r\n            res.json(JSON.stringify(serverClubList));\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }).catch((e) => {\r\n    console.log(e);\r\n  });\r\n});\r\n\r\n// this url doubles as removeSelf too - user can toggle adding self and removing self\r\napp.post('/addSelf', (req, res) => {\r\n  serverClubList.forEach((club) => {\r\n    if (club.id === req.body.id) { // finds corresponding club to add or remove user from\r\n      let userAlreadyRSVPd = false;\r\n\r\n      club.attendees = club.attendees.filter((user) => {\r\n        // checks if user has already RSVP'ed--if so, removes user from occupant list\r\n        if (user === req.body.username) {\r\n          userAlreadyRSVPd = true;\r\n          // resets goingMessage to one less occupant after user removal\r\n          club.goingMessage = `${club.attendees.length - 1} GOING`;\r\n          club.RSVPmessage = 'RSVP'; // resets RSVP button from unRSVP to RSVP\r\n        } else {\r\n          return user;\r\n        }\r\n      });\r\n\r\n      if (!userAlreadyRSVPd) { // if user has not already RSVP'd, add user as going\r\n        club.attendees.push(req.body.username);\r\n        club.goingMessage = `${club.attendees.length} GOING - YOU'RE GOING!`;\r\n        club.RSVPmessage = 'unRSVP';\r\n      }\r\n\r\n      // updates occupant list in DB\r\n      Club.findOneAndUpdate({id: club.id}, {\r\n        attendees: club.attendees,\r\n        goingMessage: club.goingMessage,\r\n        RSVPmessage: club.RSVPmessage},\r\n      (err) => {\r\n        if (err) return err;\r\n      });\r\n    }\r\n  });\r\n\r\n  res.json(JSON.stringify(serverClubList));\r\n});\r\n\r\napp.post('/getAttendees', (req, res) => {\r\n  Club.findOne({id: req.body.id}, (err, result) => {\r\n    if (err) { return err; }\r\n    res.json({list: result.attendees});\r\n  });\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n  res.send('no match');\r\n});\r\n\r\napp.listen(process.env.PORT || 3000, () => {\r\n  console.log('App started');\r\n});\r\n"]}