{"version":3,"sources":["../server/server.js"],"names":["yelp","require","mongoose","connect","clientId","process","env","CLIENT_ID_YELP","clientSecret","CLIENT_KEY_YELP","idAssigner","Schema","counter","Number","clubSchema","id","name","String","occupants","Array","userSchema","clubs","User","model","Club","Counter","app","use","static","json","post","req","res","accessToken","then","client","response","jsonBody","access_token","searchRequest","term","location","body","query","search","results","businesses","console","dir","map","newClub","club","JSON","stringify","catch","log","e","get","send","listen"],"mappings":"AAAA;;AAEA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAOC,QAAQ,aAAR,CAAb;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACAC,SAASC,OAAT,CAAiB,iCAAjB;;AAEA,IAAMC,WAAWC,QAAQC,GAAR,CAAYC,cAA7B;AACA,IAAMC,eAAeH,QAAQC,GAAR,CAAYG,eAAjC;;AAGA,IAAMC,aAAaR,SAASS,MAAT,CAAgB;AACjCC,WAAQC;AADyB,CAAhB,CAAnB;;AAIA,IAAMC,aAAaZ,SAASS,MAAT,CAAgB;AACjCI,MAAIF,MAD6B;AAEjCG,QAAMC,MAF2B;AAGjCC,aAAWC;;AAHsB,CAAhB,CAAnB;;AAOA,IAAMC,aAAalB,SAASS,MAAT,CAAgB;AACjCI,MAAIF,MAD6B;AAEjCG,QAAMC,MAF2B;AAGjCI,SAAOF;AAH0B,CAAhB,CAAnB;;AAMA,IAAMG,OAAOpB,SAASqB,KAAT,CAAe,MAAf,EAAuBH,UAAvB,CAAb;AACA,IAAMI,OAAOtB,SAASqB,KAAT,CAAe,MAAf,EAAuBT,UAAvB,CAAb;AACA,IAAMW,UAAUvB,SAASqB,KAAT,CAAe,SAAf,EAA0Bb,UAA1B,CAAhB;;AAIA,IAAMgB,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEAH,IAAII,IAAJ,CAAS,OAAT,EAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9BhC,OAAKiC,WAAL,CAAiB7B,QAAjB,EAA2BI,YAA3B,EAAyC0B,IAAzC,CAA8C,oBAAY;AAC1D,QAAMC,SAASnC,KAAKmC,MAAL,CAAYC,SAASC,QAAT,CAAkBC,YAA9B,CAAf;;AAEA,QAAMC,gBAAgB;AACpBC,YAAK,WADe;AAEpBC,gBAAUV,IAAIW,IAAJ,CAASC;AAFC,KAAtB;;AAKAR,WAAOS,MAAP,CAAcL,aAAd,EAA6BL,IAA7B,CAAkC,oBAAY;AAC5C,UAAMW,UAAUT,SAASC,QAAT,CAAkBS,UAAlC;AACAC,cAAQC,GAAR,CAAYH,OAAZ;AACAA,cAAQI,GAAR,CAAY,gBAAQ;AAClB,YAAMC,UAAU,IAAI1B,IAAJ,CAAS;AACvBT,cAAIoC,KAAKpC,EADc;AAEvBC,gBAAMmC,KAAKnC,IAFY;AAGvBE,qBAAW;;AAHY,SAAT,CAAhB;AAMD,OAPD;;AASA;AACA;AACD;AACCc,UAAIH,IAAJ,CAASuB,KAAKC,SAAL,CAAeR,OAAf,CAAT;AACC,KAhBH;AAiBC,GAzBD,EAyBGS,KAzBH,CAyBS,aAAK;AACZP,YAAQQ,GAAR,CAAYC,CAAZ;AACD,GA3BD;AA4BD,CA7BD;;AA+BA9B,IAAI+B,GAAJ,CAAQ,GAAR,EAAa,UAAC1B,GAAD,EAAMC,GAAN,EAAc;AACvBA,MAAI0B,IAAJ,CAAS,UAAT;AACD,CAFH;AAGAhC,IAAIiC,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrBZ,UAAQQ,GAAR,CAAY,0BAAZ;AAED,CAHD","file":"server.js","sourcesContent":["'use strict';\r\n\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\n\r\nconst yelp = require('yelp-fusion');\r\nconst mongoose = require('mongoose');\r\nmongoose.connect('mongodb://localhost/nightflight');\r\n\r\nconst clientId = process.env.CLIENT_ID_YELP;\r\nconst clientSecret = process.env.CLIENT_KEY_YELP;\r\n\r\n\r\nconst idAssigner = mongoose.Schema({\r\n  counter:Number,\r\n});\r\n\r\nconst clubSchema = mongoose.Schema({\r\n  id: Number,\r\n  name: String,\r\n  occupants: Array,\r\n\r\n});\r\n\r\nconst userSchema = mongoose.Schema({\r\n  id: Number,\r\n  name: String,\r\n  clubs: Array,\r\n});\r\n\r\nconst User = mongoose.model('user', userSchema);\r\nconst Club = mongoose.model('club', clubSchema);\r\nconst Counter = mongoose.model('counter', idAssigner);\r\n\r\n\r\n\r\nconst app = express();\r\n\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\napp.post('/list', (req, res) => {\r\n  yelp.accessToken(clientId, clientSecret).then(response => {\r\n  const client = yelp.client(response.jsonBody.access_token);\r\n\r\n  const searchRequest = {\r\n    term:'nightlife',\r\n    location: req.body.query,\r\n  };\r\n\r\n  client.search(searchRequest).then(response => {\r\n    const results = response.jsonBody.businesses;\r\n    console.dir(results);\r\n    results.map(club => {\r\n      const newClub = new Club({\r\n        id: club.id,\r\n        name: club.name,\r\n        occupants: [],\r\n\r\n      });\r\n    });\r\n\r\n    //const results = response.jsonBody.businesses;\r\n    //const prettyJson = JSON.stringify(response.jsonBody.businesses[0]);\r\n   // console.dir(JSON.stringify(response.jsonBody.businesses));\r\n    res.json(JSON.stringify(results));\r\n    });\r\n  }).catch(e => {\r\n    console.log(e);\r\n  });\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n    res.send('no match');\r\n  });\r\napp.listen(3000, () => {\r\n  console.log('App started on port 3000');\r\n\r\n});"]}