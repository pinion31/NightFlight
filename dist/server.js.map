{"version":3,"sources":["../server/server.js"],"names":["mongoose","require","yelp","connect","Promise","global","clientId","process","env","CLIENT_ID_YELP","clientSecret","CLIENT_KEY_YELP","clubSchema","Schema","id","String","name","occupants","Array","userSchema","clubs","Clubber","model","Club","serverClubList","app","use","static","json","post","req","res","accessToken","then","response","client","jsonBody","access_token","searchRequest","term","location","body","query","search","results","businesses","forEach","club","findOne","err","result","console","log","dir","clubResult","image_url","goingMessage","RSVPmessage","address","address1","city","state","zipcode","zip_code","stars","rating","price","length","occ","newClub","save","push","JSON","stringify","catch","e","userAlreadyRSVPd","filter","user","username","findOneAndUpdate","get","send","listen"],"mappings":"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","file":"server.js","sourcesContent":["\r\nimport 'babel-polyfill';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\n\r\nconst mongoose = require('mongoose');\r\nconst yelp = require('yelp-fusion');\r\n\r\nmongoose.connect('mongodb://localhost/nightflight');\r\nmongoose.Promise = global.Promise;\r\n\r\nconst clientId = process.env.CLIENT_ID_YELP;\r\nconst clientSecret = process.env.CLIENT_KEY_YELP;\r\n\r\nconst clubSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  occupants: Array,\r\n\r\n});\r\n\r\nconst userSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  clubs: Array,\r\n});\r\n\r\nconst Clubber = mongoose.model('user', userSchema);\r\nconst Club = mongoose.model('club', clubSchema);\r\n\r\nlet serverClubList = [];\r\n\r\nconst app = express();\r\n\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\napp.post('/list', (req, res) => {\r\n  yelp.accessToken(clientId, clientSecret).then((response) => {\r\n    const client = yelp.client(response.jsonBody.access_token);\r\n\r\n    const searchRequest = {\r\n      term: 'nightlife',\r\n      location: req.body.query,\r\n    };\r\n\r\n    client.search(searchRequest).then((response) => {\r\n      const results = response.jsonBody.businesses;\r\n      serverClubList = [];\r\n\r\n      results.forEach((club) => {\r\n        Club.findOne({id: club.id}, (err, result) => {\r\n          if (err) { console.log(`error ${err}`); }\r\n          console.dir(club);\r\n\r\n          const clubResult = {\r\n            id: club.id,\r\n            name: club.name,\r\n            occupants: [],\r\n            image_url: club.image_url,\r\n            goingMessage: '0 GOING',\r\n            RSVPmessage: 'RSVP',\r\n            address: club.location.address1,\r\n            city: club.location.city,\r\n            state: club.location.state,\r\n            zipcode: club.location.zip_code,\r\n            stars: club.rating,\r\n            price: club.price,\r\n          };\r\n\r\n          if (result) { // if club already exists in db\r\n            clubResult.occupants = result.occupants;\r\n            clubResult.goingMessage = `${result.occupants.length} GOING`;\r\n            // checks and  indicates if user is already going to this club\r\n            result.occupants.forEach((occ) => {\r\n              if (occ === req.body.name) {\r\n                clubResult.goingMessage = `${result.occupants.length} GOING - YOU'RE GOING TO THIS CLUB TONIGHT!`;\r\n                clubResult.RSVPmessage = 'unRSVP';\r\n              }\r\n            });\r\n          } else { // create new Club entry if does not exist in db\r\n            const newClub = new Club({\r\n              id: club.id,\r\n              name: club.name,\r\n              occupants: [],\r\n              goingMessage: '0 GOING',\r\n              RSVPmessage: 'RSVP',\r\n              address: club.location.address1,\r\n              city: club.location.city,\r\n              state: club.location.state,\r\n              zipcode: club.location.zip_code,\r\n              stars: club.rating,\r\n              price: club.price,\r\n            });\r\n\r\n            // save new Club entry\r\n            newClub.save((err) => {\r\n              if (err) return err;\r\n            });\r\n          }\r\n\r\n          serverClubList.push(clubResult);\r\n\r\n          if (serverClubList.length === results.length) {\r\n            res.json(JSON.stringify(serverClubList));\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }).catch((e) => {\r\n    console.log(e);\r\n  });\r\n});\r\n\r\n// this url doubles as removeSelf too - user can toggle adding self and removing self\r\napp.post('/addSelf', (req, res) => {\r\n  serverClubList.forEach((club) => {\r\n    if (club.id === req.body.id) { // finds corresponding club to add or remove user from\r\n      let userAlreadyRSVPd = false;\r\n\r\n      club.occupants = club.occupants.filter((user) => {\r\n        // checks if user has already RSVP'ed--if so, removes user from occupant list\r\n        if (user === req.body.username) {\r\n          userAlreadyRSVPd = true;\r\n          // resets goingMessage to one less occupant after user removal\r\n          club.goingMessage = `${club.occupants.length - 1} GOING`;\r\n          club.RSVPmessage = 'RSVP'; // resets RSVP button from unRSVP to RSVP\r\n        } else {\r\n          return user;\r\n        }\r\n      });\r\n\r\n      if (!userAlreadyRSVPd) { // if user has not already RSVP'd, add user as going\r\n        club.occupants.push(req.body.username);\r\n        club.goingMessage = `${club.occupants.length} GOING - YOU'RE GOING TO THIS CLUB TONIGHT!`;\r\n        club.RSVPmessage = 'unRSVP';\r\n      }\r\n\r\n      // updates occupant list in DB\r\n      Club.findOneAndUpdate({id: club.id}, {\r\n        occupants: club.occupants,\r\n        goingMessage: club.goingMessage,\r\n        RSVPmessage: club.RSVPmessage},\r\n      (err) => {\r\n        if (err) return err;\r\n      });\r\n    }\r\n  });\r\n\r\n  res.json(JSON.stringify(serverClubList));\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n  res.send('no match');\r\n});\r\n\r\napp.listen(3000, () => {\r\n  console.log('App started on port 3000');\r\n});\r\n"]}