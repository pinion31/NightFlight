{"version":3,"sources":["../server/server.js"],"names":["passport","require","TwitterStrategy","Strategy","session","cookieparser","myProfile","mongoose","yelp","connect","Promise","global","clientId","process","env","CLIENT_ID_YELP","clientSecret","CLIENT_KEY_YELP","clubSchema","Schema","id","String","name","attendees","Array","userSchema","clubs","twitterUser","token","displayName","userName","Clubber","model","Club","User","serverClubList","app","use","static","json","urlencoded","extended","req","res","next","header","secret","cookie","secure","resave","saveUninitialized","initialize","consumerKey","consumerSecret","callbackURL","tokenSecret","profile","done","findOne","exec","err","user","newUser","save","data","serializeUser","deserializeUser","obj","get","console","log","authenticate","failureRedirect","redirect","post","accessToken","then","response","client","jsonBody","access_token","searchRequest","term","location","body","query","search","results","businesses","forEach","club","result","dir","clubResult","image_url","goingMessage","RSVPmessage","address","address1","city","state","zipcode","zip_code","stars","rating","price","length","occ","newClub","push","JSON","stringify","catch","e","userAlreadyRSVPd","filter","username","findOneAndUpdate","list","send","listen"],"mappings":"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","file":"server.js","sourcesContent":["\r\nimport 'babel-polyfill';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nvar passport = require('passport');\r\nvar TwitterStrategy = require('passport-twitter').Strategy;\r\nvar session = require('express-session');\r\nvar cookieparser = require('cookie-parser');\r\nvar myProfile;\r\n\r\nconst mongoose = require('mongoose');\r\nconst yelp = require('yelp-fusion');\r\n\r\nmongoose.connect('mongodb://localhost/nightflight');\r\nmongoose.Promise = global.Promise;\r\n\r\nconst clientId = process.env.CLIENT_ID_YELP;\r\nconst clientSecret = process.env.CLIENT_KEY_YELP;\r\n\r\nconst clubSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  attendees: Array,\r\n});\r\n\r\nconst userSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  clubs: Array,\r\n});\r\n\r\nconst twitterUser = mongoose.Schema({\r\n   twitterUser:{\r\n     id : String,\r\n     token : String,\r\n     displayName : String,\r\n     userName : String,\r\n   }\r\n});\r\n\r\nconst Clubber = mongoose.model('user', userSchema);\r\nconst Club = mongoose.model('club', clubSchema);\r\nconst User = mongoose.model('twitterUser', twitterUser);\r\n\r\nlet serverClubList = [];\r\n\r\nconst app = express();\r\n\r\napp.use(express.static('static'));\r\napp.use(cookieparser());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\napp.use(function(req, res, next){\r\n     res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n     res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n     res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n     res.header('Access-Control-Allow-Credentials', \"true\");\r\n     next();\r\n });\r\n\r\napp.use(session({ secret: 'keyboard cat', cookie: { secure:false}, resave:true, saveUninitialized:true}));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\npassport.use(new TwitterStrategy({\r\n    consumerKey: 'k7xY01Rsb5ra7kSENYH67LSw8',\r\n    consumerSecret: 'FeHxH6EQyzIZlnydqIOLlmq9JvzKJYKhEZsoIczN40rmam2GCY',\r\n    callbackURL: \"http://localhost:8080/auth/twitter/callback\"\r\n  },\r\n  (token, tokenSecret, profile, done) => {\r\n    User.findOne({'twitterUser.id':profile.id}).\r\n      exec((err,user) => {\r\n        if (user !== null) {\r\n          return done(null,user);\r\n        }\r\n        else {\r\n          let newUser = new User({\r\n            twitterUser: {\r\n              id : profile.id,\r\n              token : token,\r\n              displayName : profile.displayName,\r\n              userName : profile.userName\r\n            }\r\n          });\r\n\r\n          newUser.save((err, data) => {\r\n            if (err) {return done(err);}\r\n            else {\r\n              return done(null,data);\r\n            }\r\n          });\r\n        }\r\n  });\r\n  }));\r\n\r\npassport.serializeUser((user, done) => {\r\n  done(null, user);\r\n});\r\n\r\npassport.deserializeUser((obj, done) => {\r\n  done(null, obj);\r\n});\r\n\r\napp.get('/login', (req,res) => {\r\n  console.log('passport failure');\r\n\r\n});\r\napp.get('/callback', (req,res) => {\r\n    console.log('successful callback');\r\n});\r\n\r\n// Redirect the user to Twitter for authentication.  When complete, Twitter\r\n// will redirect the user back to the application at\r\n//   /auth/twitter/callback\r\napp.get('/auth/twitter', passport.authenticate('twitter', (err,user) => {\r\n  //console.dir(err);\r\n  //console.dir(user);\r\n  //console.log(user.query.oauth_token);\r\n  //console.log(user.query.oauth_verifier);\r\n}));\r\n\r\n// Twitter will redirect the user to this URL after approval.  Finish the\r\n// authentication process by attempting to obtain an access token.  If\r\n// access was granted, the user will be logged in.  Otherwise,\r\n// authentication has failed.\r\n\r\n/*\r\napp.get('/auth/twitter/callback',\r\n  passport.authenticate('twitter', { successRedirect: '/callback',\r\n                                     failureRedirect: '/login' })\r\n);*/\r\n\r\napp.get('/auth/twitter/callback',\r\n  passport.authenticate('twitter', { failureRedirect: '/' }),\r\n  (req,res) => {\r\n      res.redirect('/');\r\n      console.log('success');\r\n  }\r\n);\r\n\r\napp.post('/list', (req, res) => {\r\n  yelp.accessToken(clientId, clientSecret).then((response) => {\r\n    const client = yelp.client(response.jsonBody.access_token);\r\n\r\n    const searchRequest = {\r\n      term: 'nightlife',\r\n      location: req.body.query,\r\n    };\r\n\r\n    client.search(searchRequest).then((response) => {\r\n      const results = response.jsonBody.businesses;\r\n      serverClubList = [];\r\n\r\n      results.forEach((club) => {\r\n        Club.findOne({id: club.id}, (err, result) => {\r\n          if (err) { console.log(`error ${err}`); }\r\n          console.dir(club);\r\n\r\n          const clubResult = {\r\n            id: club.id,\r\n            name: club.name,\r\n            attendees: [],\r\n            image_url: club.image_url,\r\n            goingMessage: '0 GOING',\r\n            RSVPmessage: 'RSVP',\r\n            address: club.location.address1,\r\n            city: club.location.city,\r\n            state: club.location.state,\r\n            zipcode: club.location.zip_code,\r\n            stars: club.rating,\r\n            price: club.price,\r\n          };\r\n\r\n          if (result) { // if club already exists in db\r\n            clubResult.attendees = result.attendees;\r\n            clubResult.goingMessage = `${result.attendees.length} GOING`;\r\n            // checks and  indicates if user is already going to this club\r\n            result.attendees.forEach((occ) => {\r\n              if (occ === req.body.name) {\r\n                clubResult.goingMessage = `${result.attendees.length} GOING - YOU'RE GOING!`;\r\n                clubResult.RSVPmessage = 'unRSVP';\r\n              }\r\n            });\r\n          } else { // create new Club entry if does not exist in db\r\n            const newClub = new Club({\r\n              id: club.id,\r\n              name: club.name,\r\n              attendees: [],\r\n              goingMessage: '0 GOING',\r\n              RSVPmessage: 'RSVP',\r\n              address: club.location.address1,\r\n              city: club.location.city,\r\n              state: club.location.state,\r\n              zipcode: club.location.zip_code,\r\n              stars: club.rating,\r\n              price: club.price,\r\n            });\r\n\r\n            // save new Club entry\r\n            newClub.save((err) => {\r\n              if (err) return err;\r\n            });\r\n          }\r\n\r\n          serverClubList.push(clubResult);\r\n\r\n          if (serverClubList.length === results.length) {\r\n            res.json(JSON.stringify(serverClubList));\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }).catch((e) => {\r\n    console.log(e);\r\n  });\r\n});\r\n\r\n// this url doubles as removeSelf too - user can toggle adding self and removing self\r\napp.post('/addSelf', (req, res) => {\r\n  serverClubList.forEach((club) => {\r\n    if (club.id === req.body.id) { // finds corresponding club to add or remove user from\r\n      let userAlreadyRSVPd = false;\r\n\r\n      club.attendees = club.attendees.filter((user) => {\r\n        // checks if user has already RSVP'ed--if so, removes user from occupant list\r\n        if (user === req.body.username) {\r\n          userAlreadyRSVPd = true;\r\n          // resets goingMessage to one less occupant after user removal\r\n          club.goingMessage = `${club.attendees.length - 1} GOING`;\r\n          club.RSVPmessage = 'RSVP'; // resets RSVP button from unRSVP to RSVP\r\n        } else {\r\n          return user;\r\n        }\r\n      });\r\n\r\n      if (!userAlreadyRSVPd) { // if user has not already RSVP'd, add user as going\r\n        club.attendees.push(req.body.username);\r\n        club.goingMessage = `${club.attendees.length} GOING - YOU'RE GOING!`;\r\n        club.RSVPmessage = 'unRSVP';\r\n      }\r\n\r\n      // updates occupant list in DB\r\n      Club.findOneAndUpdate({id: club.id}, {\r\n        attendees: club.attendees,\r\n        goingMessage: club.goingMessage,\r\n        RSVPmessage: club.RSVPmessage},\r\n      (err) => {\r\n        if (err) return err;\r\n      });\r\n    }\r\n  });\r\n\r\n  res.json(JSON.stringify(serverClubList));\r\n});\r\n\r\napp.post('/getAttendees', (req, res) => {\r\n  console.log('hit');\r\n  res.json({list:['chris','nicole', 'corryn', 'krystle']});\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n  res.send('no match');\r\n});\r\n\r\napp.listen(3000, () => {\r\n  console.log('App started on port 3000');\r\n});"]}