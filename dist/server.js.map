{"version":3,"sources":["../server/server.js"],"names":["mongoose","require","connect","Promise","global","yelp","clientId","process","env","CLIENT_ID_YELP","clientSecret","CLIENT_KEY_YELP","idAssigner","Schema","counter","Number","clubSchema","id","String","name","occupants","Array","userSchema","clubs","Clubber","model","Club","Counter","serverClubList","app","use","static","json","post","req","res","accessToken","then","client","response","jsonBody","access_token","searchRequest","term","location","body","query","search","results","businesses","dbData","from","forEach","findOne","club","err","result","console","log","clubResult","image_url","newClub","save","dir","push","length","JSON","stringify","catch","e","userAlreadyRSVPd","user","username","findOneAndUpdate","get","send","listen"],"mappings":"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","file":"server.js","sourcesContent":["'use strict';\r\n\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nconst mongoose = require('mongoose');\r\nmongoose.connect('mongodb://localhost/nightflight');\r\nmongoose.Promise = global.Promise;\r\n\r\nconst yelp = require('yelp-fusion');\r\n\r\nconst clientId = process.env.CLIENT_ID_YELP;\r\nconst clientSecret = process.env.CLIENT_KEY_YELP;\r\n\r\nconst idAssigner = mongoose.Schema({\r\n  counter:Number,\r\n});\r\n\r\nconst clubSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  occupants: Array,\r\n\r\n});\r\n\r\nconst userSchema = mongoose.Schema({\r\n  id: String,\r\n  name: String,\r\n  clubs: Array,\r\n});\r\n\r\nconst Clubber = mongoose.model('user', userSchema);\r\nconst Club = mongoose.model('club', clubSchema);\r\nconst Counter = mongoose.model('counter', idAssigner);\r\n\r\nlet serverClubList = [];\r\n\r\nconst app = express();\r\n\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\napp.post('/list', (req, res) => {\r\n\r\n  yelp.accessToken(clientId, clientSecret).then(response => {\r\n  const client = yelp.client(response.jsonBody.access_token);\r\n\r\n  const searchRequest = {\r\n    term:'nightlife',\r\n    location: req.body.query,\r\n  };\r\n\r\n  client.search(searchRequest).then(response => {\r\n    const results = response.jsonBody.businesses;\r\n    const dbData = Array.from(response.jsonBody.businesses);\r\n    serverClubList = [];\r\n\r\n\r\n\r\n    results.forEach(club => {\r\n      Club.findOne({id:club.id}, (err,result) => {\r\n        if (err) {console.log(`error ${err}`);}\r\n\r\n        const clubResult =  {\r\n              id: club.id,\r\n              name:club.name,\r\n              occupants:[],\r\n              image_url:club.image_url\r\n            };\r\n\r\n        if (result) { // if club already exists in db\r\n            clubResult.occupants = result.occupants;\r\n        }\r\n        else {//create new Club entry if does not exist in db\r\n          const newClub = new Club({\r\n            id: club.id,\r\n            name: club.name,\r\n            occupants: [],\r\n\r\n          });\r\n\r\n          //save new Club entry\r\n          newClub.save((err, club) => {\r\n            if (err) {\r\n               console.log('error!');\r\n               console.dir(err);\r\n            }\r\n\r\n          });\r\n\r\n        }\r\n\r\n        serverClubList.push(clubResult);\r\n\r\n       // console.log(`length = ${serverClubList.length}`);\r\n\r\n        if (serverClubList.length === results.length) {\r\n          res.json(JSON.stringify(serverClubList));\r\n        }\r\n\r\n      });\r\n    });\r\n  });\r\n}).catch(e => {\r\n    console.log(e);\r\n  });\r\n});\r\n\r\napp.post('/addSelf', (req, res) => {\r\n  serverClubList.forEach((club)=> {\r\n    if (club.id === req.body.id) { // finds matching club to add user\r\n      let userAlreadyRSVPd = false;\r\n\r\n      //\r\n      club.occupants.forEach(user => {\r\n        if (user === req.body.username) { //checks if user has already RSVP'ed\r\n          userAlreadyRSVPd = true;\r\n        }\r\n      });\r\n\r\n      if (!userAlreadyRSVPd) { //if user has not already RSVP'd, add user as going\r\n        club.occupants.push(req.body.username);\r\n        Club.findOneAndUpdate({id:club.id}, {occupants: club.occupants}, (err,response) => {\r\n          if (err) return err;\r\n        });\r\n\r\n      }\r\n      else {\r\n        //TODO: send back message -'You've already rsvp'ed'\r\n      }\r\n\r\n    }\r\n  });\r\n\r\n  res.json(JSON.stringify(serverClubList));\r\n\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n    res.send('no match');\r\n  });\r\napp.listen(3000, () => {\r\n  console.log('App started on port 3000');\r\n\r\n});"]}